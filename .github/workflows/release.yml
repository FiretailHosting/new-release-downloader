name: Build and Release

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x64, arm64, x86]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
        
      - name: Install Dependencies
        run: npm ci

      - name: Bundle with esbuild
        run: |
          mkdir -p dist/build
          npx esbuild server.cjs --bundle --platform=node --target=node18 --outfile=dist/build/server.js

      - name: Package Executable for ${{ matrix.arch }}
        run: |
          npx pkg ./dist/build/server.js --target node18-${{ matrix.arch }}-linux -o dist/$(node -p "require('./package.json').name + '-v' + require('./package.json').version + '-linux-' + '${{ matrix.arch }}'")
      
      - name: Upload Artifact for ${{ matrix.arch }}
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.arch }}
          path: dist/*-${{ matrix.arch }}
    
  release:
  needs: build
  runs-on: ubuntu-latest
  steps:
    - name: Download Build Artifacts
      uses: actions/download-artifact@v4

    # Create a GitHub release based on the pushed tag.
    - name: Check if Release Exists
      id: check_release
      uses: actions/github-script@v7
      env: 
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        script: |
          // Remove the refs/tags/ prefix to get the tag name.
          const tag = process.env.GITHUB_REF.replace('refs/tags/', '');
          try {
            const release = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: tag,
            });
            core.info(`Release for tag ${tag} already exists.`);
            return { exists: 'true' };
          } catch (error) {
            if (error.status === 404) {
              core.info(`No release found for tag ${tag}.`);
              return { exists: 'false' };
            }
            throw error;
          }
        result-encoding: string
        
    # Create a GitHub release only if it does not exist.
    - name: Create GitHub Release
      id: create_release
      if: steps.check_release.outputs.exists == 'false'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          Automated release containing executables for amd64, arm64, and i386.
        draft: false
        prerelease: false
