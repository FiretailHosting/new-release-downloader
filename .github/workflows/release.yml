name: Build and Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x64, arm64]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
        
      - name: Install Dependencies
        run: npm ci

      - name: Bundle with esbuild
        run: |
          mkdir -p dist/build
          npx esbuild server.cjs --bundle --platform=node --target=node18 --outfile=dist/build/server.js

      - name: Package Executable for ${{ matrix.arch }}
        run: |
          # Create executables with fixed names (no version in filename)
          npx pkg ./dist/build/server.js --target node18-${{ matrix.arch }}-linux -o dist/release-downloader-linux-${{ matrix.arch }}
      
      - name: Upload Artifact for ${{ matrix.arch }}
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.arch }}
          path: dist/release-downloader-linux-${{ matrix.arch }}
    
  release:
    needs: build
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4

      # Set the tag as the version (by stripping the 'refs/tags/' prefix)
      - name: Set tag as version
        id: set_tag
        run: |
          TAG_NAME=${GITHUB_REF/refs\/tags\//}
          echo "Tag is $TAG_NAME"
          echo "tag=$TAG_NAME" >> $GITHUB_OUTPUT

      - name: Check if Release Exists
        id: check_release
        uses: actions/github-script@v7
        env: 
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          script: |
            const tag = process.env.GITHUB_REF.replace('refs/tags/', '');
            try {
              await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: tag,
              });
              core.info(`Release for tag ${tag} already exists.`);
              core.setOutput('exists', 'true');
            } catch (error) {
              if (error.status === 404) {
                core.info(`No release found for tag ${tag}.`);
                core.setOutput('exists', 'false');
              } else {
                throw error;
              }
            }
          result-encoding: string

      - name: Authenticate GitHub App
        id: auth
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.GH_APP_ID }}
          private_key: ${{ secrets.GH_APP_PRIVATE_KEY }}

      - name: Create GitHub Release
        id: create_release
        if: steps.check_release.outputs.exists == 'false'
        run: |
          TAG=${GITHUB_REF/refs\/tags\//}
          echo "Creating release for tag ${TAG}"
          response=$(curl -s -X POST -H "Authorization: Bearer ${{ steps.auth.outputs.token }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/releases \
            -d "{
              \"tag_name\": \"${TAG}\",
              \"name\": \"Release ${TAG}\",
              \"body\": \"Automated release for tag ${TAG}\",
              \"draft\": false,
              \"prerelease\": false
            }")
          echo "Response: $response"
          UPLOAD_URL=$(echo $response | jq -r .upload_url)
          echo "upload_url=$UPLOAD_URL" >> $GITHUB_OUTPUT

  upload_x64:
    needs: release
    runs-on: ubuntu-latest
    steps:
      - name: Download x64 Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: binary-x64
          path: dist
      - name: Authenticate GitHub App for x64
        id: auth_x64
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.GH_APP_ID }}
          private_key: ${{ secrets.GH_APP_PRIVATE_KEY }}
      - name: Upload x64 Binary
        run: |
          binary_file=dist/release-downloader-linux-x64
          echo "Uploading: $binary_file"
          UPLOAD_URL="${{ needs.release.outputs.upload_url }}"
          curl -X POST -H "Authorization: Bearer ${{ steps.auth_x64.outputs.token }}" \
            -H "Content-Type: application/octet-stream" \
            --data-binary @"$binary_file" \
            "$(echo $UPLOAD_URL | sed 's/{?name,label}//')?name=release-downloader-linux-x64"

  upload_arm64:
    needs: release
    runs-on: ubuntu-latest
    steps:
      - name: Download arm64 Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: binary-arm64
          path: dist
      - name: Authenticate GitHub App for arm64
        id: auth_arm64
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.GH_APP_ID }}
          private_key: ${{ secrets.GH_APP_PRIVATE_KEY }}
      - name: Upload arm64 Binary
        run: |
          binary_file=dist/release-downloader-linux-arm64
          echo "Uploading: $binary_file"
          UPLOAD_URL="${{ needs.release.outputs.upload_url }}"
          curl -X POST -H "Authorization: Bearer ${{ steps.auth_arm64.outputs.token }}" \
            -H "Content-Type: application/octet-stream" \
            --data-binary @"$binary_file" \
            "$(echo $UPLOAD_URL | sed 's/{?name,label}//')?name=release-downloader-linux-arm64"

  